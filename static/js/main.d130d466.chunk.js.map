{"version":3,"sources":["Portfolio/Hero/rust.svg","layout.js","Portfolio/Hero/index.jsx","Portfolio/Nav/index.jsx","Portfolio/index.jsx","theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","styled","div","MarginedContainer","BackgroundCircle","p","circleSize","extra","theme","colors","yellow","HeroContainer","CircleContainer","Name","Title","ImgContainer","Hero","useState","scrollPosition","setScrollPosition","handleScroll","position","window","pageYOffset","useEffect","addEventListener","removeEventListener","console","log","src","img","alt","NavWrapper","NavContainer","NavButton","button","First","Nav","PortfolioContainer","Portfolio","orange","lavender","dark_purple","Global","styles","css","App","props","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,kaCGpC,IAAMC,EAAOC,IAAOC,IAAV,KAMJC,EAAoBF,YAAOD,EAAPC,CAAH,K,86BCH9B,IAEMG,EAAmBH,IAAOC,IAAV,KAEZ,SAACG,GAAD,4BACSC,IADT,oCAC4CD,QAD5C,IAC4CA,OAD5C,EAC4CA,EAAGE,MAD/C,gBAED,SAACF,GAAD,4BAAsBC,IAAtB,4BAAiDD,QAAjD,IAAiDA,OAAjD,EAAiDA,EAAGE,MAApD,gBAEE,SAACF,GAAD,OACN,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGE,OAAH,eATe,MASf,qBACmCF,EAAEE,MADrC,uBATe,MASf,SAGQ,SAACF,GAAD,OACP,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGE,OAAH,eAbe,MAaf,qBACmCF,EAAEE,MADrC,uBAbe,MAaf,SAGY,SAACF,GAAD,OAAOA,EAAEG,MAAMC,OAAOC,UAKhCC,EAAgBV,IAAOC,IAAV,KAObU,EAAkBX,IAAOC,IAAV,KAEfW,EAAOZ,IAAOC,IAAV,KASJY,EAAQb,IAAOC,IAAV,KAKLa,EAAed,IAAOC,IAAV,KAmCHc,EA7BF,WAAO,IAAD,EAC2BC,mBAAS,GADpC,mBACVC,EADU,KACMC,EADN,KAGXC,EAAe,WACnB,IAAMC,EAAWC,OAAOC,YACxBJ,EAAkBE,IAQpB,OALAG,qBAAU,WAER,OADAF,OAAOG,iBAAiB,SAAUL,GAC3B,kBAAME,OAAOI,oBAAoB,SAAUN,OAEpDO,QAAQC,IAAIV,GAEV,kBAACP,EAAD,KACE,kBAACR,EAAD,KACE,kBAACU,EAAD,oBACA,kBAACC,EAAD,sBACA,kBAACC,EAAD,KACE,yBAAKc,IAAKC,IAAKC,IAAI,OAGvB,kBAACnB,EAAD,KACE,kBAACR,EAAD,CAAkBG,MAAOW,O,gaC3EjC,IAAMc,EAAa/B,IAAOC,IAAV,IFWI,IEJd+B,EAAehC,YAAOE,EAAPF,CAAH,KAIZiC,EAAYjC,IAAOkC,OAAV,KAITC,EAAQnC,YAAOiC,EAAPjC,CAAH,KAiBIoC,EAbH,WACV,OACE,kBAACL,EAAD,KACE,kBAACC,EAAD,KACE,kBAACG,EAAD,cACA,kBAACF,EAAD,eACA,kBAACA,EAAD,iBACA,kBAACA,EAAD,mB,mHCzBR,IAAMI,EAAqBrC,IAAOC,IAAV,KAmBTqC,EAdG,WAChB,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,uCACA,0CACA,yCACA,wCACA,4C,8QCfC,IAAM9B,EAAQ,CACnBC,OAAQ,CACN+B,OAAQ,UACRC,SAAU,UACV/B,OAAQ,UACRgC,YAAa,YAIJC,EAAS,kBACpB,kBAAC,IAAD,CACEC,OAAQ,SAACvC,GAAD,OAAOwC,YAAN,SCDEC,EATH,SAACC,GACX,OACE,kBAAC,IAAD,CAAevC,MAAOA,GACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcwC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.d130d466.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rust.2295159b.svg\";","// import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: 20px;\n`;\n\nexport const MarginedContainer = styled(Grid)`\n  margin: 0 auto;\n  max-width: 1060px;\n  /* padding: 0 10px; */\n`;\n\nexport const zNav = 50;\n","import React, { useEffect, useState } from \"react\";\n\nimport styled from \"@emotion/styled\";\nimport { MarginedContainer } from \"../../layout\";\nimport img from \"./rust.svg\";\n\nconst circleSize = \"970\";\n\nconst BackgroundCircle = styled.div`\n  position: absolute;\n  left: ${(p) =>\n    `calc( 50% - ${circleSize / 2}px - 50px + calc(-${p?.extra}px * 5) )`};\n  top: ${(p) => `calc( 50% - ${circleSize / 2}px - calc(${p?.extra}px * 5) )`};\n\n  width: ${(p) =>\n    p?.extra\n      ? `calc(${circleSize}px + calc(${p.extra}px * 10))`\n      : `${circleSize}px`};\n  height: ${(p) =>\n    p?.extra\n      ? `calc(${circleSize}px + calc(${p.extra}px * 10))`\n      : `${circleSize}px`};\n  background: ${(p) => p.theme.colors.yellow};\n  border-radius: 50%;\n  z-index: -50;\n`;\n\nconst HeroContainer = styled.div`\n  padding-top: 50px;\n  min-height: 1000px;\n  overflow: hidden;\n  position: relative;\n`;\n\nconst CircleContainer = styled.div``;\n\nconst Name = styled.div`\n  font-size: 100px;\n  grid-column-start: 3;\n  grid-column-end: 13;\n  padding-top: 150px;\n  font-family: \"Josefin Sans\", sans-serif;\n  font-weight: bold;\n`;\n\nconst Title = styled.div`\n  grid-column-start: 8;\n  grid-column-end: 13;\n`;\n\nconst ImgContainer = styled.div`\n  height: 100px;\n  width: 100px;\n  /* background: red; */\n`;\n\nconst Hero = () => {\n  const [scrollPosition, setScrollPosition] = useState(0);\n\n  const handleScroll = () => {\n    const position = window.pageYOffset;\n    setScrollPosition(position);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  });\n  console.log(scrollPosition);\n  return (\n    <HeroContainer>\n      <MarginedContainer>\n        <Name>Aaron Janke</Name>\n        <Title>Web Developer</Title>\n        <ImgContainer>\n          <img src={img} alt=\"\" />\n        </ImgContainer>\n      </MarginedContainer>\n      <CircleContainer>\n        <BackgroundCircle extra={scrollPosition} />\n      </CircleContainer>\n    </HeroContainer>\n  );\n};\n\nexport default Hero;\n\n// const isBrowser = typeof window !== `undefined`;\n\n// const getScrollPosition = ({ element, useWindow }) => {\n//   if (!isBrowser) return { x: 0, y: 0 };\n\n//   const target = element ? element.current : document.body;\n\n//   const position = target.getBoundingClientRect();\n\n//   return useWindow\n//     ? { x: window.scrollX, y: window.scrollY }\n//     : { x: position.left, y: position.top };\n// };\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { MarginedContainer, zNav } from \"../../layout\";\n\nconst NavWrapper = styled.div`\n  position: fixed;\n  width: 100%;\n  height: 40px;\n  z-index: ${zNav};\n`;\n\nconst NavContainer = styled(MarginedContainer)`\n  padding: 10px 0;\n`;\n\nconst NavButton = styled.button`\n  height: 30px;\n`;\n\nconst First = styled(NavButton)`\n  grid-column-start: 8;\n`;\n\nconst Nav = () => {\n  return (\n    <NavWrapper>\n      <NavContainer>\n        <First>About</First>\n        <NavButton>Skills</NavButton>\n        <NavButton>Projects</NavButton>\n        <NavButton>Contact</NavButton>\n      </NavContainer>\n    </NavWrapper>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport Hero from \"./Hero\";\nimport Nav from \"./Nav\";\n\nconst PortfolioContainer = styled.div`\n  min-height: 5000px;\n  overflow: hidden;\n`;\n\nconst Portfolio = () => {\n  return (\n    <PortfolioContainer>\n      <Nav />\n      <Hero />\n      <div>Skills</div>\n      <div>Live Chat</div>\n      <div>Projects</div>\n      <div>Contact</div>\n      <div>Something</div>\n    </PortfolioContainer>\n  );\n};\n\nexport default Portfolio;\n","import React from \"react\";\n\nimport { Global as EmoGlobal, css } from \"@emotion/react\";\n\nexport const theme = {\n  colors: {\n    orange: \"#F6511D\",\n    lavender: \"#9D8DF1\",\n    yellow: \"#F7CB15\",\n    dark_purple: \"#381D2A\",\n  },\n};\n\nexport const Global = () => (\n  <EmoGlobal\n    styles={(p) => css`\n      * {\n        box-sizing: border-box;\n      }\n      body {\n        margin: 0;\n        a {\n          text-decoration: none;\n          color: inherit;\n        }\n      }\n    `}\n  />\n);\n","import React from \"react\";\nimport Portfolio from \"./Portfolio\";\nimport { ThemeProvider } from \"@emotion/react\";\nimport { theme, Global } from \"./theme\";\n\nconst App = (props) => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Global />\n      <Portfolio />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}